%define namespace [namespace]
%define intranamespace_name [intranamespace_name]
%define two_dig_version [package_branch_two_digit]
%define two_dig_nodot_version [package_branch_two_digit_nodot]
%define build_version [version]
%define curPath [cur_path]

Summary: Cray Common Tools Interface
Name: %{namespace}-%{intranamespace_name}
Version: %{build_version}
Release: %(echo ${BUILD_METADATA})
License: Dual BSD or GPLv2
Group: Development/System
URL: [url]
Source: [tarball]
BuildRoot: %{_tmppath}/%{name}-root
Prefix: /opt/cray/pe
Provides: %{namespace}-%{intranamespace_name} = %{build_version}
Requires: cray-gcc-8.1.0

%define _use_internal_dependency_generator 0
%define __find_requires %{curPath}/scripts/find-requires
%define debug_package %{nil}

%description
Cray Common Tools Interface.

# version
%define major_version %(echo %{build_version} | awk -v n=1 'BEGIN { FS = "." } ; { print $n }')
%define minor_version %(echo %{build_version} | awk -v n=2 'BEGIN { FS = "." } ; { print $n }')

# _prefix
%define _namespace_prefix %{prefix}
%define _name_prefix %{_namespace_prefix}/%{intranamespace_name}
%define _version_prefix %{_name_prefix}/%{build_version}

# _moduledir
%define _namespace_moduledir %{prefix}/modulefiles
%define _name_moduledir %{_namespace_moduledir}/%{namespace}-%{intranamespace_name}

%prep
%setup
%build

%install
CUR_DIR=`pwd`

mkdir -p %{buildroot}%{_name_moduledir}
cp ${CUR_DIR}%{_version_prefix}/%{build_version} %{buildroot}%{_name_moduledir}/
chmod o+rx %{buildroot}%{_name_moduledir}/%{build_version}

mkdir -p %{buildroot}%{_version_prefix}

cp -R ${CUR_DIR}%{_version_prefix} %{buildroot}/%{_name_prefix}/
rm -rf %{buildroot}/%{_version_prefix}/modulefile

install -D ${CUR_DIR}%{_version_prefix}/release_info %{buildroot}%{_version_prefix}/
echo "%{build_version}-%{release}" > %{buildroot}%{_version_prefix}/.cray_rpm_release

mkdir -p %{buildroot}%{_namespace_prefix}/admin-pe/set_default_files/

install -D ${CUR_DIR}%{_version_prefix}/set_default_%{namespace}-%{intranamespace_name}_%{build_version} \
            %{buildroot}%{_namespace_prefix}/admin-pe/set_default_files/set_default_%{namespace}-%{intranamespace_name}_%{build_version}

mkdir -p %{buildroot}%{_version_prefix}/docs/

install -D ${CUR_DIR}/../../extras/docs/ATTRIBUTIONS_cti.txt \
       %{buildroot}%{_version_prefix}/docs/ATTRIBUTIONS_cti.%{build_version}.txt


#clean  up unwanted content in install dir (/opt/cray/pe/cti/version)
rm -rf %{buildroot}%{_version_prefix}/lib/cmake
rm -rf %{buildroot}%{_version_prefix}/lib/libboost_program*
rm -rf %{buildroot}%{_version_prefix}/bin
rm -rf %{buildroot}%{_version_prefix}/share
rm -f %{buildroot}%{_version_prefix}/%{build_version}

touch %{buildroot}%{_version_prefix}/.cray_dynamic_file_list

#add the libraries needing to be put into ldcache into the .cray_dynamic_file_list
find %{buildroot}%{_version_prefix} | grep "libcommontools_[bf]e\.so\." | sed "/.*\.so\.[0-9]\.[0-9]/d" | sed 's:%{buildroot}::g' \
> %{buildroot}%{_version_prefix}/.cray_dynamic_file_list

find %{buildroot}%{_version_prefix} | grep "libpatchAPI\.so\." | sed "/.*\.so\.[0-9]\.[0-9]/d" | sed 's:%{buildroot}::g' \
>> %{buildroot}%{_version_prefix}/.cray_dynamic_file_list

find %{buildroot}%{_version_prefix} | grep "libparseAPI\.so\." | sed "/.*\.so\.[0-9]\.[0-9]/d" | sed 's:%{buildroot}::g' \
>> %{buildroot}%{_version_prefix}/.cray_dynamic_file_list

find %{buildroot}%{_version_prefix} | grep "libdynC_API\.so\." | sed "/.*\.so\.[0-9]\.[0-9]/d" | sed 's:%{buildroot}::g' \
>> %{buildroot}%{_version_prefix}/.cray_dynamic_file_list

find %{buildroot}%{_version_prefix} | grep "libdynElf\.so\." | sed "/.*\.so\.[0-9]\.[0-9]/d" | sed 's:%{buildroot}::g' \
>> %{buildroot}%{_version_prefix}/.cray_dynamic_file_list

find %{buildroot}%{_version_prefix} | grep "libdynDwarf\.so\." | sed "/.*\.so\.[0-9]\.[0-9]/d" | sed 's:%{buildroot}::g' \
>> %{buildroot}%{_version_prefix}/.cray_dynamic_file_list

find %{buildroot}%{_version_prefix} | grep "libcommon\.so\." | sed "/.*\.so\.[0-9]\.[0-9]/d" | sed 's:%{buildroot}::g' \
>> %{buildroot}%{_version_prefix}/.cray_dynamic_file_list

find %{buildroot}%{_version_prefix} | grep "libsymLite\.so\." | sed "/.*\.so\.[0-9]\.[0-9]/d" | sed 's:%{buildroot}::g' \
>> %{buildroot}%{_version_prefix}/.cray_dynamic_file_list

find %{buildroot}%{_version_prefix} | grep "libpcontrol\.so\." | sed "/.*\.so\.[0-9]\.[0-9]/d" | sed 's:%{buildroot}::g' \
>> %{buildroot}%{_version_prefix}/.cray_dynamic_file_list

find %{buildroot}%{_version_prefix} | grep "libinstructionAPI\.so\." | sed "/.*\.so\.[0-9]\.[0-9]/d" | sed 's:%{buildroot}::g' \
>> %{buildroot}%{_version_prefix}/.cray_dynamic_file_list

find %{buildroot}%{_version_prefix} | grep "libdyninstAPI\.so\." | sed "/.*\.so\.[0-9]\.[0-9]/d" | sed 's:%{buildroot}::g' \
>> %{buildroot}%{_version_prefix}/.cray_dynamic_file_list

find %{buildroot}%{_version_prefix} | grep "libdyninstAPI_RT\.so\." | sed "/.*\.so\.[0-9]\.[0-9]/d" | sed 's:%{buildroot}::g' \
>> %{buildroot}%{_version_prefix}/.cray_dynamic_file_list

find %{buildroot}%{_version_prefix} | grep "libstackwalk\.so\." | sed "/.*\.so\.[0-9]\.[0-9]/d" | sed 's:%{buildroot}::g' \
>> %{buildroot}%{_version_prefix}/.cray_dynamic_file_list

find %{buildroot}%{_version_prefix} | grep "libsymtabAPI\.so\." | sed "/.*\.so\.[0-9]\.[0-9]/d" | sed 's:%{buildroot}::g' \
>> %{buildroot}%{_version_prefix}/.cray_dynamic_file_list

find %{buildroot}%{_version_prefix} | grep "libssh2\.so\." | sed "/.*\.so\.[0-9]\.[0-9]/d" | sed 's:%{buildroot}::g' \
>> %{buildroot}%{_version_prefix}/.cray_dynamic_file_list

find %{buildroot}%{_version_prefix} | grep "libdw\.so\." | sed "/.*\.so\.[0-9]\.[0-9]/d" | sed 's:%{buildroot}::g' \
>> %{buildroot}%{_version_prefix}/.cray_dynamic_file_list

find %{buildroot}%{_version_prefix} | grep "libelf\.so\." | sed "/.*\.so\.[0-9]\.[0-9]/d" | sed 's:%{buildroot}::g' \
>> %{buildroot}%{_version_prefix}/.cray_dynamic_file_list


%files
%defattr(-,root,root,-)
%dir %{_name_moduledir}
%dir %{_namespace_prefix}
%dir %{_name_prefix}
%dir %{_version_prefix}
%dir %{_version_prefix}/docs
%dir %{_version_prefix}/libexec
%dir %{_version_prefix}/lib
%dir %{_version_prefix}/include

%{_version_prefix}/docs/ATTRIBUTIONS_cti*.txt
%{_version_prefix}/libexec/*
%{_version_prefix}/lib/*
%{_version_prefix}/include/*

%{_namespace_prefix}/admin-pe/set_default_files/set_default_%{namespace}-%{intranamespace_name}_%{build_version}
%{_name_moduledir}/%{build_version}
%{_version_prefix}/.cray_rpm_release
%{_version_prefix}/.cray_dynamic_file_list
%{_version_prefix}/set_default_%{namespace}-%{intranamespace_name}_%{build_version}
%{_version_prefix}/release_info
%{_version_prefix}/set_pkgconfig_default_%{namespace}-%{intranamespace_name}


%post

#
# Set as default if no default exists either because this is first install of
# cti or CRAY_INSTALL_DEFAULT=1 and previous default was deleted
#

#Set the install path in the modulefile & set_default script(s)
sed -i "s,\[install_dir\],$RPM_INSTALL_PREFIX,g" \
$RPM_INSTALL_PREFIX/modulefiles/%{namespace}-%{intranamespace_name}/%{build_version} \
$RPM_INSTALL_PREFIX/admin-pe/set_default_files/set_default_%{namespace}-%{intranamespace_name}_%{build_version} \
$RPM_INSTALL_PREFIX/%{intranamespace_name}/%{build_version}/set_default_%{namespace}-%{intranamespace_name}_%{build_version} \
$RPM_INSTALL_PREFIX/%{intranamespace_name}/%{build_version}/set_pkgconfig_default_%{namespace}-%{intranamespace_name}

sed -i "s,\[module_dir\],$RPM_INSTALL_PREFIX/modulefiles,g" \
$RPM_INSTALL_PREFIX/admin-pe/set_default_files/set_default_%{namespace}-%{intranamespace_name}_%{build_version}

sed -i "s,\[install_dir\],$RPM_INSTALL_PREFIX/%{intranamespace_name}/%{build_version},g" \
$RPM_INSTALL_PREFIX/%{intranamespace_name}/%{build_version}/lib/pkgconfig/common_tools_be.pc \
$RPM_INSTALL_PREFIX/%{intranamespace_name}/%{build_version}/lib/pkgconfig/common_tools_fe.pc

# prevent echo of new directory as it messes up install output
if [ $RPM_INSTALL_PREFIX = "%{prefix}" ]
then
  $RPM_INSTALL_PREFIX/admin-pe/set_default_files/set_default_%{namespace}-%{intranamespace_name}_%{build_version}
  
  if [ ! -d /etc%{_namespace_prefix}/admin-pe/bindmount.conf.d ]
  then
    mkdir -p /etc%{_namespace_prefix}/admin-pe/bindmount.conf.d 
  fi
  echo %{_namespace_prefix}/%{intranamespace_name} > /etc%{_namespace_prefix}/admin-pe/bindmount.conf.d/%{intranamespace_name}.conf

  if [ ! -d /etc%{_namespace_prefix}/admin-pe/modulepaths.conf.d ]
  then
    mkdir -p /etc%{_namespace_prefix}/admin-pe/modulepaths.conf.d
  fi
  echo %{_name_moduledir} > /etc%{_namespace_prefix}/admin-pe/modulepaths.conf.d/%{intranamespace_name}.conf

fi

/sbin/ldconfig

%preun
# Cleanup default link if it point to this
# version-%{intranamespace_name}-%{intranamespace_name}
rm $RPM_INSTALL_PREFIX/%{intranamespace_name}/%{build_version}/.cray_dynamic_file_list
default_link="${RPM_INSTALL_PREFIX}/%{intranamespace_name}/default"
version="%{build_version}"

# Cleanup module .version if it points to this version
if [ -f ${RPM_INSTALL_PREFIX}/modulefiles/%{namespace}-%{intranamespace_name}/.version ]
then
  dotversion=`grep ModulesVersion ${RPM_INSTALL_PREFIX}/modulefiles/%{namespace}-%{intranamespace_name}/.version | cut -f2 -d'"'`

  if [ "$dotversion" = "$version" ]
  then
    /bin/rm -f ${RPM_INSTALL_PREFIX}/modulefiles/%{namespace}-%{intranamespace_name}/.version
    echo "Uninstalled version and .version file match = ${build_version}."
    echo "Removing %{intranamespace_name} .version file."
    rm -f ${default_link}
  fi
fi


%postun
if [ $1 == 1 ]
then
  exit 0
fi

if [[ -d ${RPM_INSTALL_PREFIX}/%{intranamespace_name} ]]
then
  if [[ -z `ls ${RPM_INSTALL_PREFIX}/%{intranamespace_name}` ]]
  then
    rm -rf ${RPM_INSTALL_PREFIX}/%{intranamespace_name}
    rm -rf /etc%{_namespace_prefix}/admin-pe/bindmount.conf.d/%{intranamespace_name}.conf
    rm -rf /etc%{_namespace_prefix}/admin-pe/modulepaths.conf.d/%{intranamespace_name}.conf
  fi
fi

if [[ -d ${RPM_INSTALL_PREFIX}/modulefiles/%{namespace}-%{intranamespace_name} ]]
then
  if [[ -z `ls ${RPM_INSTALL_PREFIX}/modulefiles/%{namespace}-%{intranamespace_name}`/ ]]
  then
    rm -rf ${RPM_INSTALL_PREFIX}/modulefiles/%{namespace}-%{intranamespace_name}
  fi
fi

%changelog

