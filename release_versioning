#==============================================================================
# Release and shared library version control for the common tools interface.
#
# Copyright 2011-2022 Hewlett Packard Enterprise Development LP.
#
#     Redistribution and use in source and binary forms, with or
#     without modification, are permitted provided that the following
#     conditions are met:
#
#      - Redistributions of source code must retain the above
#        copyright notice, this list of conditions and the following
#        disclaimer.
#
#      - Redistributions in binary form must reproduce the above
#        copyright notice, this list of conditions and the following
#        disclaimer in the documentation and/or other materials
#        provided with the distribution.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# Note: After changing this file one must 'autoreconf -ifv' AND 'configure'
#       needs to be committed.
#
# LIBTOOLS VERSIONING SYSTEM
# --------------------------
# current, revision, and age are a libtools concept. They are completely
# orthogonal to the Cray release version system (which correlates with
# the module name (e.g. cray-cti/1.0.1))
#
# Libtools flag: -version-info <current>:<revision>:<age>
#
# 'current' combines the roles of major and minor versions so it updated
# every time the API changes.
# 'age' is the number of previous versions that the current version is
# backward compatible with.   So normally age == minor version
# 'revision' tracks the *internal* changes of the library, so should be
# updated whenever the binaries change in any way.
#
# The following explanation may help to understand the above rules a
# bit better: consider that there are three possible kinds of reactions
# from users of your library to changes in a shared library:
#
# 1. Programs using the previous version may use the new version as drop-in
#    replacement, and programs using the new version can also work with the
#    previous one. In other words, no recompiling nor relinking is needed.
#    In this case, bump revision only, don’t touch current nor age.
#
# 2. Programs using the previous version may use the new version as drop-in
#    replacement, but programs using the new version may use APIs not present
#    in the previous one. In other words, a program linking against the new
#    version may fail with “unresolved symbols” if linking against the old
#    version at runtime: set revision to 0, bump current and age.
#
# 3. Programs may need to be changed, recompiled, and relinked in order to use
#    the new version. Bump current, set revision and age to 0.
#
# RELEASE VERSION
# ---------------
# The traditional release version is tracked by the three digit
# common_tool_major.common_tool_minor.common_tool_revision string.
#
# Note that both version are only updated once per release, not every time
# a change is made.
#
# DSO FILE NAMES:
# ---------------
# The file names of the DSO files are ('-' = 'minus' not 'dash'):
#    libcommontools_fe.so.fe_current-fe_age.fe_age.revision
#    libcommontools_be.so.be_current-be_age.be_age.revision
#
# JENKINS INTEGRATION
# -------------------
# We now key off the BUILD_NUMBER environment variable from jenkins
# to get the revision number. We hardcode the revision to "9999" if the
# environment variable is not set.
#
#----- the rules in summary --------------------------------------------------
# if the new release removes or changes an existing interface:
#     increment common_tool_major, be_current and fe_current
#     reset common_tool_minor, be_age and fe_age = 0
# else if the new release adds new interface functions:
#     increment common_tool_minor, be_current, be_age, fe_current and fe_age
# else:
#     leave the versions alone
#==============================================================================

common_tool_major="2"
common_tool_minor="16"

be_current="3"
be_age="1"
be_revision="0"

fe_current="3"
fe_age="1"
fe_revision="0"

revision="1"

# Jenkins will override this
build_number=""

